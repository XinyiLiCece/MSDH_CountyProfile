library(shiny)
library(plotly)
source('profilePage.R', local = TRUE)
source('togglableBlock.R', local = TRUE)
source('lineGraph.R', local = TRUE)
source('table.R', local = TRUE)
source('homePage.R', local = TRUE)
source('msdh_intro.R', local = TRUE)
source('submenu.R', local = TRUE)
source('profilePage-pc.R', local = TRUE)
source('stackBarGraph.R', local = TRUE)


# Define UI for random distribution app ----
ui <- fluidPage(
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "index.css")
  ),
  
  tags$div(class = "header", checked = NA, 
           # child: images
           
           # child: content (that will be placed on top of the images)
           tags$div(class="title",
                    tags$h1("")
           )
  ),
  
    # Main panel for displaying outputs ----
    mainPanel(
        tags$div(class = "main-tabPanel",
                 tabsetPanel(type = "tabs",
                             tabPanel("Home", htmlOutput("page1")),
                             tabPanel("Health Profile", htmlOutput("page2"))
                             # tabPanel("Factory", htmlOutput("page3"))
                 )),
      width = 12
    )
  )

 

server <- function(input, output) {
  dA <- read.csv(file = "RaceByYearTemplet.csv", header = TRUE)
  output$datacb <- renderTable({
    dA[c("year",input$variable), drop = FALSE]
  }, rownames = TRUE)

  output$page1 <- renderUI({
    div(
      div(class = "page1", checked = NA, 
        # child: images
        tags$div(class="landing-block background-content", 
          tags$img(src = "ms-profile.jpg", width = "100%")
        ),
          
        # child: content (that will be placed on top of the images)
        tags$div(class="landing-block foreground-content",
          tags$h1("Promote and protect the health of Mississippi.")
        )
      ),
      aboutPageUI("about")
    )
  })
  
  output$page2 <- renderUI({
    profilePageUI("hellohi")
  })
  

  callModule(profilePage, "hellohi")
  
  # ph <- callModule(tryPage, "try")
  
  # 
  # output$page3 <- renderUI({
  #   tryPageUI("try", text3)
  # })
  
  

  callModule(aboutPage, "about")
}

# Run the application 
shinyApp(ui = ui, server = server)

